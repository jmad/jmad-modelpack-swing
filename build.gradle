buildscript {
    project.ext['CERN_VM'] = System.getProperty('CERN_TECHNET_VM') ?: System.getenv('CERN_TECHNET_VM') ?: project.hasProperty('CERN_TECHNET_VM') ?: false
    project.ext['DEPLOYMENT'] = System.getProperty('DEPLOYMENT') ?: false

    repositories {
        if (project['CERN_VM']) {
            maven { url 'http://artifactory.cern.ch/ds-jcenter' }
            maven { url 'http://artifactory.cern.ch/development' }
            maven { url 'http://artifactory.cern.ch/gradle-plugins' }
        } else {
            gradlePluginPortal()
        }
    }

    dependencies {
        classpath 'com.github.jk1:gradle-license-report:1.5'
        classpath 'io.github.gradle-nexus:publish-plugin:1.0.0'
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'eclipse'

group = project['POM.groupId']

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    if (CERN_VM) {
        maven { url 'http://artifactory.cern.ch/ds-jcenter' }
        maven { url 'http://artifactory.cern.ch/development' }
    } else {
        mavenCentral()
    }
}

dependencies {
    compile group: 'io.jmad', name: 'jmad-modelpack-service', version: '0.9.4'

    compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'

    compile group: 'org.springframework', name: 'spring-core', version: '5.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-context', version: '5.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-beans', version: '5.2.0.RELEASE'

    compile group: 'io.projectreactor', name: 'reactor-core', version: '3.3.0.RELEASE'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    compile group: 'org.swinglabs', name: 'swingx', version: '1.6.1'

    testCompile group: 'org.springframework', name: 'spring-test', version: '5.2.0.RELEASE'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.13.2'
    testCompile group: 'junit', name: 'junit', version: '4.13'
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
}

wrapper {
    gradleVersion = '5.4.1'
    distributionType = Wrapper.DistributionType.ALL
}

sourceSets {
    main {
        java { srcDirs = ['src/java'] }
        resources { srcDirs = ['src/java'] }
    }

    test {
        java { srcDirs = ['src/test'] }
        resources { srcDirs = ['src/test'] }
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("$buildDir/reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}

javadoc { options.encoding = "UTF-8" }

if (!project.tasks.findByName("javadocJar")) {
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
}

if (!project.tasks.findByName("sourcesJar")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

if (!project['CERN_VM']) {
    println 'Applying licensing report'
    apply plugin: 'com.github.jk1.dependency-license-report'

    licenseReport {
        renderers = [this.class.classLoader.loadClass('com.github.jk1.license.render.InventoryHtmlReportRenderer').newInstance()]
        filters = [this.class.classLoader.loadClass('com.github.jk1.license.filter.LicenseBundleNormalizer').newInstance()]
    }
}

if (project['DEPLOYMENT']) {
    println 'Applying deployment scripts'
    apply from: 'https://raw.githubusercontent.com/ossgang/gradle-scripts/master/deployment/deploy-to-maven-central.gradle'
}
